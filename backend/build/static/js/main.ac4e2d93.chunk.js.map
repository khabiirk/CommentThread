{"version":3,"sources":["services/comment.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","newObject","post","Comments","props","list","map","c","className","parent","name","comment","moment","date","fromNow","onClick","reply","NewComment","onSubmit","handleSubmit","replying","value","Name","onChange","handleNameChange","placeholder","required","Comment","handleCommentChange","type","App","useState","setList","newName","setName","newParent","setParent","newComment","setComment","setReplying","useEffect","commentService","then","response","data","e","now","Date","concat","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yOAEMA,EAAU,gBAkBD,EAhBA,WACX,OAAOC,IAAMC,IAAIF,IAeN,EAZA,SAAAG,GACX,OAAOF,IAAMG,KAAKJ,EAASG,I,iBC4D/B,IAAME,EAAW,SAACC,GACd,OACE,6BACGA,EAAMC,KAAKC,KAAI,SAAAC,GAAC,OACjB,yBAAKC,UAAU,WACZD,EAAEE,OACO,gCAAMF,EAAEE,QACN,4BACZ,4BAAKF,EAAEG,MACP,4BAAKH,EAAEI,SACP,4BAAKC,IAAOL,EAAEM,MAAMC,WACpB,4BAAQC,QAAS,kBAAMX,EAAMY,MAAMT,EAAEG,QAArC,eAQJO,EAAa,SAACb,GAClB,OACE,0BAAMc,SAAUd,EAAMe,cACnBf,EAAMgB,SACS,0CAAgBhB,EAAMK,QACpB,4BAElB,2BAAOY,MAAOjB,EAAMkB,KAAMC,SAAUnB,EAAMoB,iBAAkBC,YAAY,OAAOC,UAAQ,IACvF,2BAAOL,MAAOjB,EAAMuB,QAASJ,SAAUnB,EAAMwB,oBAAqBH,YAAY,UAAUC,UAAQ,IAChG,6BACE,4BAAQG,KAAK,UAAb,aAMOC,EAlGf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACN1B,EADM,KACA2B,EADA,OAEcD,qBAFd,mBAENE,EAFM,KAEGC,EAFH,OAGkBH,qBAHlB,mBAGNI,EAHM,KAGKC,EAHL,OAIoBL,qBAJpB,mBAINM,EAJM,KAIMC,EAJN,OAKmBP,oBAAS,GAL5B,mBAKNX,EALM,KAKImB,EALJ,KA0Cb,OAlCAC,qBAAU,WACRC,IAEKC,MAAK,SAAAC,GACJX,EAAQW,EAASC,YA+BvB,yBAAKpC,UAAU,OACb,4BAAQA,UAAU,eAIlB,6BACE,kBAAC,EAAD,CAAYA,UAAU,MAAMc,KAAMW,EACtBN,QAASU,EACTlB,aAnCG,SAAC0B,GACpB,IAAMC,EAAM,IAAIC,KACVpC,EAAU,CAACD,KAAOuB,EACPtB,QAAS0B,EACTxB,KAAMiC,EACNrC,OAAQ0B,GAEzBM,EAAsB9B,GACtBqB,EAAQ3B,EAAK2C,OAAOrC,IACpBuB,EAAQ,IACRI,EAAW,KA0BKd,iBAvBO,SAACqB,GACxBX,EAAQW,EAAEI,OAAO5B,QAuBDO,oBArBU,SAACiB,GAC3BP,EAAWO,EAAEI,OAAO5B,QAqBJZ,OAAQ0B,EACRf,SAAUA,KAGxB,kBAAC,EAAD,CAAUZ,UAAU,cAAcH,KAAMA,EAAMW,MAvBpC,SAAC6B,GACbT,EAAUS,GACVN,GAAY,QC/BIW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac4e2d93.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseUrl = '/api/comments';\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst remove = objectId => {\n    return axios.delete(baseUrl + \"/\"+ objectId)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(baseUrl + \"/\" + id, newObject)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    remove: remove,\n    update: update\n}","import React, { useState, useEffect } from 'react';\nimport commentService from './services/comment';\nimport moment from 'moment';\n\n\n\nfunction App() {\n  const [list, setList] = useState([])\n  const [newName, setName] = useState()\n  const [newParent, setParent] = useState()\n  const [newComment, setComment] = useState()\n  const [replying, setReplying] = useState(false)\n\n\n  useEffect(() => {\n    commentService\n        .getAll()\n        .then(response => {\n          setList(response.data)\n        })\n  })\n\n  const handleSubmit = (e) => {\n    const now = new Date();\n    const comment = {name : newName,\n                     comment: newComment,\n                     date: now,\n                     parent: newParent\n                    };\n    commentService.create(comment);\n    setList(list.concat(comment));\n    setName('')\n    setComment('')\n  }\n\n  const handleNameChange = (e) => {\n    setName(e.target.value)\n  }\n  const handleCommentChange = (e) => {\n    setComment(e.target.value)\n  }\n  const reply = (e) => {\n    setParent(e)\n    setReplying(true)\n\n\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n        \n      </header>\n      <div>\n        <NewComment className='New' Name={newName}\n                    Comment={newComment} \n                    handleSubmit={handleSubmit}\n                    handleNameChange={handleNameChange}\n                    handleCommentChange={handleCommentChange}\n                    parent={newParent}\n                    replying={replying}\n                    />\n      </div>\n      <Comments className='CommentList' list={list} reply={reply}/>\n    </div>\n  );\n}\n\nconst Comments = (props) => {\n    return (\n      <div>\n        {props.list.map(c => \n        <div className='Comment'>\n          {c.parent ? \n                    <ul>@{c.parent}</ul>\n                    : <p></p>}\n          <ul>{c.name}</ul>\n          <ul>{c.comment}</ul>\n          <ul>{moment(c.date).fromNow()}</ul>\n          <button onClick={() => props.reply(c.name)}>Reply</button>\n        </div>\n          )}\n      </div>\n\n    )\n}\n\nconst NewComment = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      {props.replying ? \n                      <p>replying to {props.parent}</p>\n                      : <p></p>\n                      }\n      <input value={props.Name} onChange={props.handleNameChange} placeholder='Name' required/>\n      <input value={props.Comment} onChange={props.handleCommentChange} placeholder='Comment' required/>\n      <div>\n        <button type='submit'>Submit</button>\n      </div>\n    </form>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}